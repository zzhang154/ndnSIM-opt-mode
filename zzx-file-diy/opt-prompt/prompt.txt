It is the main files of my project. You can see that I only make changes in the application layers, and application files. I don't modify and NFD,  ndn-cxx filesm or strategy file.

The current problem is that I can run successfully the project in -d debug mode, but it reports bugs under the -d optimized mode (under ndnSIM-2.9). And I have been stuck in here for a long time, and I am very confused.

Can you help me solve the problem I met?

Remember that please don't give me the high-level instruction of how to revise. You must give me a detailed solution, i.e., which file, which line, which function you want to modify, and give me the revised result in code block / canvas. 

Next, I will attach the readme of my project, and also the bug log I encounter.

Readme:
# ndnSIM‑opt‑test Project Summary

## 1. File Structure

dd@dd:~/testFolder/ndnSIM-opt-test/src/ndnSIM$ tree -L 2 apps/agg-mini/
apps/agg-mini/
├── agg-mini.md
├── aggregator
│   ├── AggregatorApp.cpp
│   └── AggregatorApp.hpp
├── buffer
│   ├── AggBuffer.cpp
│   ├── AggBuffer.hpp
│   ├── AggBufferManager.cpp
│   └── AggBufferManager.hpp
├── common
│   ├── CommonUtils.cpp
│   └── CommonUtils.hpp
├── leaf
│   ├── LeafApp.cpp
│   └── LeafApp.hpp
├── ndn-tree-example.md
└── root
    ├── RootApp.cpp
    └── RootApp.hpp

5 directories, 14 files
## 2. Main Components

1.  **AggregatorApp (`agg-mini/aggregator/`)**
    *   Receives upstream Interests (e.g., from `RootApp`).
    *   Fans out corresponding Interests to multiple downstream children (`LeafApp`s).
    *   Uses `AggBufferManager` to track responses for each sequence number.
    *   Aggregates results (sums) received from children.
    *   Replies upstream with the aggregated result upon completion or timeout.

2.  **RootApp (`agg-mini/root/`)**
    *   Initiates the process by sending sequential Interests (e.g., `/app/agg/seq=1`, `/app/agg/seq=2`, ...).
    *   Inherits from `ndn::Consumer`.
    *   Configurable interval and maximum sequence number.

3.  **LeafApp (`agg-mini/leaf/`)**
    *   Simple producer application.
    *   Inherits from `ndn::Producer`.
    *   Listens for Interests on its configured prefix (e.g., `/app/leaf1/seq=N`).
    *   Replies with Data packets containing a payload (presumably a value based on the sequence number or node ID, though the exact payload generation isn't shown in `LeafApp.cpp` itself, it relies on the base `Producer` logic).

4.  **Aggregation Buffer (`agg-mini/buffer/`)**
    *   **`AggBuffer`**: Stores the state for a single aggregation sequence number, including the expected count, received count, partial sum, parent Interest name, and timeout event ID.
    *   **`AggBufferManager`**: Manages multiple `AggBuffer` instances, keyed by sequence number. Handles buffer creation, retrieval, removal, and scheduling/canceling straggler timeouts.

5.  **Utilities (`agg-mini/common/`)**
    *   `CommonUtils.hpp` (referenced but not provided): Likely contains helper functions, possibly for encoding/decoding data payloads or setting packet fields.

6.  **Example Scenario (`examples/agg-mini/`)**
    *   `agg-mini-simulation.cpp`:
        *   Reads physical topology (`agg-mini-topo.txt`) and logical tree structure (`tree.txt`).
        *   Identifies node roles (Root, Aggregator, Leaf) based on the tree structure.
        *   Installs the NDN stack and sets up FIB routes according to the tree.
        *   Installs `RootApp`, `AggregatorApp`, and `LeafApp` on the appropriate nodes with configured prefixes and parameters.
        *   Uses `ndn::GlobalRoutingHelper` to establish reachability.
        *   Runs the ns-3 simulation for a fixed duration.

## 3. Integration into ndnSIM

*   Files are placed under `src/ndnSIM/apps/agg-mini/` and `src/ndnSIM/examples/agg-mini/`, suggesting integration with the ndnSIM source tree.
*   Assumes `wscript` files (not provided) exist to compile these components and register the `agg-mini-simulation` example with `waf`.
*   Applications inherit from ndnSIM base classes (`App`, `Consumer`, `Producer`).
*   Utilizes core ndnSIM/ns-3 features: `AppHelper`, `FibHelper`, `AnnotatedTopologyReader`, `Simulator`, `LogComponent`, `TypeId`, Attributes, `Names`, `Node`, `Ptr`, `Callback`, `EventId`, `Time`.
*   Interacts with ndn-cxx objects (`ndn::Name`, `ndn::Interest`, `ndn::Data`, `ndn::Block`).
*   The simulation is likely run via `./waf --run agg-mini-simulation` (or similar, depending on the exact example name in `wscript`).

Log file:
Program received signal SIGSEGV, Segmentation fault.
[Program stopped, printing backtrace]
#0  __gnu_cxx::__exchange_and_add_dispatch (__val=-1, __mem=0x8) at /usr/include/c++/11/ext/atomicity.h:99
#1  std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x0) at /usr/include/c++/11/bits/shared_ptr_base.h:165
#2  std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=<synthetic pointer>, __in_chrg=<optimized out>) at /usr/include/c++/11/bits/shared_ptr_base.h:705
#3  std::__shared_ptr<ndn::lp::PitToken, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=<synthetic pointer>, __in_chrg=<optimized out>) at /usr/include/c++/11/bits/shared_ptr_base.h:1154
#4  std::shared_ptr<ndn::lp::PitToken>::~shared_ptr (this=<synthetic pointer>, __in_chrg=<optimized out>) at /usr/include/c++/11/bits/shared_ptr.h:122
#5  nfd::fw::Strategy::sendData (this=0x55555572f0e0, data=..., egress=..., pitEntry=std::shared_ptr<nfd::pit::Entry> (use count 5, weak count 0) = {...}) at ../src/ndnSIM/NFD/daemon/fw/strategy.cpp:276
#6  0x00007ffff7dd491e in operator() (d=..., i=..., __closure=0x7fffffffcae0) at ../src/ndnSIM/NFD/daemon/fw/forwarder.cpp:162
#7  nfd::cs::Cs::find<nfd::Forwarder::onIncomingInterest(const ndn::Interest&, const nfd::FaceEndpoint&)::<lambda(const ndn::Interest&, const ndn::Data&)>, nfd::Forwarder::onIncomingInterest(const ndn::Interest&, const nfd::FaceEndpoint&)::<lambda(const ndn::Interest&)> > (miss=..., hit=..., interest=..., this=0x555555720b90) at ../src/ndnSIM/NFD/daemon/table/cs.hpp:88
#8  nfd::Forwarder::onIncomingInterest (this=0x5555557209e0, interest=..., ingress=...) at ../src/ndnSIM/NFD/daemon/fw/forwarder.cpp:161
#9  0x00007ffff7dd4a26 in operator() (endpointId=<optimized out>, interest=..., __closure=<optimized out>) at ../src/ndnSIM/NFD/daemon/fw/forwarder.cpp:67
#10 std::__invoke_impl<void, nfd::Forwarder::Forwarder(nfd::FaceTable&)::<lambda(const nfd::face::Face&)>::<lambda(const ndn::Interest&, const EndpointId&)>&, const ndn::Interest&, long unsigned int const&> (__f=...) at /usr/include/c++/11/bits/invoke.h:61
#11 std::__invoke_r<void, nfd::Forwarder::Forwarder(nfd::FaceTable&)::<lambda(const nfd::face::Face&)>::<lambda(const ndn::Interest&, const EndpointId&)>&, const ndn::Interest&, long unsigned int const&> (__fn=...) at /usr/include/c++/11/bits/invoke.h:111
#12 std::_Function_handler<void(const ndn::Interest&, long unsigned int const&), nfd::Forwarder::Forwarder(nfd::FaceTable&)::<lambda(const nfd::face::Face&)>::<lambda(const ndn::Interest&, const EndpointId&)> >::_M_invoke(const std::_Any_data &, const ndn::Interest &, const unsigned long &) (__functor=..., __args#0=..., __args#1=<optimized out>) at /usr/include/c++/11/bits/std_function.h:290
#13 0x00007ffff7daea0d in std::function<void (ndn::Interest const&, unsigned long const&)>::operator()(ndn::Interest const&, unsigned long const&) const (__args#1=@0x7fffffffd070: 0, __args#0=..., this=0x555555725ae0) at /usr/include/c++/11/bits/std_function.h:590
#14 ndn::util::signal::Signal<nfd::face::LinkService, ndn::Interest, unsigned long>::operator() (args#1=@0x7fffffffd070: 0, args#0=..., this=0x555555724848) at ns3/ndnSIM/ndn-cxx/util/signal/signal.hpp:233
#15 nfd::face::LinkService::receiveInterest (this=this@entry=0x555555724840, interest=..., endpoint=@0x7fffffffd070: 0) at ../src/ndnSIM/NFD/daemon/face/link-service.cpp:100
#16 0x00007ffff7da8bd0 in nfd::face::GenericLinkService::decodeInterest (this=0x555555724840, netPkt=..., firstPkt=..., endpointId=@0x7fffffffd070: 0) at ../src/ndnSIM/NFD/daemon/face/generic-link-service.cpp:435
#17 0x00007ffff7daa738 in nfd::face::GenericLinkService::decodeNetPacket (this=0x555555724840, netPkt=..., firstPkt=..., endpointId=<optimized out>) at ../src/ndnSIM/NFD/daemon/face/generic-link-service.cpp:355
#18 0x00007ffff7daaae9 in nfd::face::GenericLinkService::doReceivePacket (this=0x555555724840, packet=..., endpoint=@0x7fffffffd070: 0) at ../src/ndnSIM/NFD/daemon/face/generic-link-service.cpp:335
#19 0x00007ffff7dada72 in operator() (__closure=<optimized out>) at ../src/ndnSIM/NFD/daemon/face/internal-transport.cpp:53
#20 std::__invoke_impl<void, nfd::face::InternalForwarderTransport::receivePacket(const ndn::Block&)::<lambda()>&> (__f=...) at /usr/include/c++/11/bits/invoke.h:61
#21 std::__invoke_r<void, nfd::face::InternalForwarderTransport::receivePacket(const ndn::Block&)::<lambda()>&> (__fn=...) at /usr/include/c++/11/bits/invoke.h:111
#22 std::_Function_handler<void(), nfd::face::InternalForwarderTransport::receivePacket(const ndn::Block&)::<lambda()> >::_M_invoke(const std::_Any_data &) (__functor=...) at /usr/include/c++/11/bits/std_function.h:290
#23 0x00007ffff6711a2e in ns3::DefaultSimulatorImpl::ProcessOneEvent (this=0x5555556348c0) at ../src/core/model/default-simulator-impl.cc:151
#24 0x00007ffff6711aae in ns3::DefaultSimulatorImpl::Run (this=0x5555556348c0) at ../src/core/model/default-simulator-impl.cc:204
#25 0x000055555556310b in main (argc=<optimized out>, argv=<optimized out>) at ../src/ndnSIM/examples/agg-mini/agg-mini-simulation.cpp:232
__gnu_cxx::__exchange_and_add_dispatch (__val=-1, __mem=0x8) at /usr/include/c++/11/ext/atomicity.h:99
99            return __exchange_and_add_single(__mem, __val);
A debugging session is active.

        Inferior 1 [process 1138529] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
Debugging completed. Check logs in log_file/agg_mini_output.log